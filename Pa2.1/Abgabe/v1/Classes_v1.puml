@startuml

skinparam dpi 200

package App {
    class Main {
        -ParamSetIdx: uint8
    }

    class ParamSet

    class StateHandler {
        +process()
        +setState(AbstractState&)
    }

    package States {

        StateHandler --> StateInitializeMcu
        StateHandler --> StateCalibrateLineSensors
        StateHandler --> StateReadyToDrive
        StateHandler --> StateDriveToStart
        StateHandler --> StateDriveToFinish
        StateHandler --> StateDriveOverGap
        StateHandler --> StateDisplayCountdown
        StateHandler --> StateDisplayLapTime
        StateHandler --> StateErrorHandler
        StateHandler --> StateSetParameters

        class StateInitializeMcu {
            +enter()
            +process()
            +leave()
        }

        class StateCalibrateLineSensors {
            +enter()
            +process()
            +leave()
        }

        class StateReadyToDrive {
            +enter()
            +process()
            +leave()
        }

        class StateDriveToStart {
            +enter()
            +process()
            +leave()
        }

        class StateDriveToFinish {
            +enter()
            +process()
            +leave()
        }

        class StateDriveToFinishAfterGap {
            +enter()
            +process()
            +leave()
        }

        class StateDriveOverGap {
            +enter()
            +process()
            +leave()
        }

        class StateDisplayCountdown {
            +enter()
            +process()
            +leave()
        }

        class StateDisplayLapTime {
            +enter()
            +process()
            +leave()
        }

        class StateErrorHandler {
            +enter()
            +process()
            +leave()
        }

        class StateSetParameters {
            +enter()
            +process()
            +leave()
        }

    
    }
    /'note top of AbstractState
        This is a struct
    end note'/

    Main -left-> StateHandler
}

package Service {
    class ServiceInit {
        +init()
    }

    class OledDisplay {
        +init()
        +reset()
        +beginPaint()
        +endPaint()
        +sendBlock()
    }

    class Buttons {
        +init()
        +getState(uint8)
    }

    class EepromIo {
        +init()
        +Seek(uint16)
        +readByte(): uint8
        +writeByte(uint8)
    }

    class LineSensors {
        +init()
        +getState(uint8)
    }

    class DriveMotors {
        +init()
        +setDirection(uint8)
        +setSpeed(uint8)
    }

    class Buzzer {
        +init()
        +shortBeep()
        +alarmSignal()
    }

    class Timer {
        +init()
        +getTime(): uint32
    }

    class ErrorHandler {
        +raiseError()
    }
}




StateDriveToStart -[#Gray,bold]-> ErrorHandler
StateDriveToFinish -[#Gray,bold]-> ErrorHandler
StateDriveOverGap -[#Gray,bold]-> ErrorHandler
StateErrorHandler -[#Gray,bold]-> ErrorHandler




Main -[#Fuchsia,bold]-> ServiceInit

ParamSet -[#DarkMagenta,bold]-> EepromIo

StateInitializeMcu -[#Red,bold]-> Buttons
StateInitializeMcu -[#Gold,bold]-> OledDisplay

StateCalibrateLineSensors -[#Red,bold]-> Buttons
StateCalibrateLineSensors -[#MidnightBlue,bold]-> LineSensors

StateReadyToDrive -[#Green,bold]-> DriveMotors
StateReadyToDrive -[#MidnightBlue,bold]-> LineSensors
StateReadyToDrive -[#Gold,bold]-> OledDisplay
StateReadyToDrive -[#DodgerBlue,bold]-> Timer

StateDriveToStart -[#Orange,bold]-> Buzzer
StateDriveToStart -[#Green,bold]-> DriveMotors
StateDriveToStart -[#MidnightBlue,bold]-> LineSensors
StateDriveToStart -[#Gold,bold]-> OledDisplay
StateDriveToStart -[#DodgerBlue,bold]-> Timer

StateDriveToFinish -[#Green,bold]-> DriveMotors
StateDriveToFinish -[#MidnightBlue,bold]-> LineSensors
StateDriveToFinish -[#Gold,bold]-> OledDisplay
StateDriveToFinish -[#DodgerBlue,bold]-> Timer

StateDriveOverGap -[#Green,bold]-> DriveMotors
StateDriveOverGap -[#MidnightBlue,bold]-> LineSensors
StateDriveOverGap -[#DodgerBlue,bold]-> Timer

StateDisplayCountdown -[#Gold,bold]-> OledDisplay
StateDisplayCountdown -[#DodgerBlue,bold]-> Timer

StateDisplayLapTime -[#Green,bold]-> DriveMotors
StateDisplayLapTime -[#Gold,bold]-> OledDisplay
StateDisplayLapTime -[#DodgerBlue,bold]-> Timer
StateDisplayLapTime -[#Orange,bold]-> Buzzer

StateErrorHandler -[#Orange,bold]-> Buzzer
StateErrorHandler -[#Green,bold]-> DriveMotors
StateErrorHandler -[#Gold,bold]-> OledDisplay

StateSetParameters -[#Red,bold]-> Buttons
StateSetParameters -[#Gold,bold]-> OledDisplay




package Hal {
    class HalInit {
        +init()
    }

    class TickTimer {
        +init()
        +enable()
        +disable()
        +getTickCount()
    }

    class Spi {
        +init()
        +enable()
        +disable()
        +configure()
        +exchange()
    }

    class Adc {
        +init()
        +disable()
        +enable()
        +readChannel()
    }

    class Cpu {
        +irqEnable()
        +sleep()
        +delay()
        +setClock()
        +halt()
    }

    class Eeprom {
        +init()
        +Seek(uint16)
        +readByte(): uint8
        +writeByte(uint8)
    }

    class Gpio {
        +init()
        +setPin()
        +clrPin()
        +getPin()
        +setPwm()
    }

}

ErrorHandler -[#Gray,bold]-> Gpio

ServiceInit -[#Fuchsia,bold]-> HalInit

OledDisplay -[#Gold,bold]-> Spi
OledDisplay -[#Gold,bold]-> Gpio

Buttons -[#Red,bold]-> Gpio

Timer -[#DodgerBlue,bold]-> TickTimer

EepromIo -[#DarkMagenta,bold]-> Eeprom

LineSensors -[#MidnightBlue,bold]-> Adc

DriveMotors -[#Green,bold]-> Gpio

Buzzer -[#Orange,bold]-> Gpio



note as N1
    The init class of a package
    calls every init method of
    all the classes in this package
end note

note as N2
    As long as not declared
    otherwise each arrow shows
    a <<uses>> relationship
end note

@enduml
