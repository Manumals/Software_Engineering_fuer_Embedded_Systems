@startuml Classes

skinparam dpi 100
skinparam arrowThickness 3

package App {
    enum StatesEnum {
        InitializeMcu
        CalibrateLineSensors
        ReadyToDrive
        DriveToStart
        DriveToFinish
        DriveOverGap
        DisplayCountdown
        DisplayLapTime
        ErrorHandler
        SetParameters
    }


    class Main { 
    }

    class ParamSet {
        '+speed: UInt8
        '+curveRadius: UInt8
    }
    note right of ParamSet
        The exact parameters will
        be defined in detail later
    end note

    class ParamSets {
        -ParamSetIdx: UInt8
        +nextParamSet(void): void
        +getParamSet(void): ParamSet
    }

    ParamSets ..> ParamSet

    class StateHandler {
        -currentState: StateEnum
        +process()
    }
    note top of StateHandler
        The main loop repeatedly calls process().
        The StateHandler starts with the first
        state and calles its process function.
        The return value of thes function
        indicates the next state.
    end note

    StateHandler ..> StatesEnum

    package States {

        StateHandler ..> InitializeMcu
        StateHandler ..> CalibrateLineSensors
        StateHandler ..> ReadyToDrive
        StateHandler ..> DriveToStart
        StateHandler ..> DriveToFinish
        StateHandler ..> DriveOverGap
        StateHandler ..> DisplayCountdown
        StateHandler ..> DisplayLapTime
        StateHandler ..> ErrorHandler
        StateHandler ..> SetParameters

        class InitializeMcu {
            +initMcu(void): StateEnum 
        }

        class CalibrateLineSensors {
            +calibrateLineSensors(void): StateEnum
        }

        class ReadyToDrive {
            +waitForInput(void): StateEnum
        }

        class DriveToStart {
            -lastError: UInt8
            +driveToStart(void): StateEnum
            +getErrorMsg(void): char*
        }
        DriveToStart ..> ParamSets

        class DriveToFinish {
            -lastError: UInt8
            +driveToFinish(void): StateEnum
            +getErrorMsg(void): char*
        }
        DriveToFinish ..> ParamSets

        class DriveOverGap {
            -lastError: UInt8
            +driveOverGap(void): StateEnum
            +getErrorMsg(void): char*
        }
        DriveOverGap ..> ParamSets
        DriveOverGap ..> Utilities

        class DisplayCountdown {
            +startCountDown(void): StateEnum
        }

        class DisplayLapTime {
            -startTimeMs: UInt32
            +showLapTime(void): StateEnum
        }

        class SetParameters {
            +displayParamSetIdx(void): StateEnum
        }

    }

    Main .left.> StateHandler
}

SetParameters ..> ParamSets

class ErrorHandler {
    +DisplayError(msg: char*): void
}

package Service {
    'As far as we know ServiceInit does not need any parameters and doesn't provide a return value
    class ServiceInit {
        +init(void): UInt8
    }
    note right of ServiceInit
        This is the init class of the package.
        It calls every init method of all
        the other classes in this package
    end note

    class Utilities {
        +displayTeamName(void): void
        +stopDriving(void): void
        +findGuideLine(void): UInt8
        +followGuideLine(tmr: Timer): UInt8
    }
    Utilities .[#MidnightBlue].> LineSensors
    Utilities .[#Green].> DriveMotors
    Utilities .[#Gold].> OledDisplay

    InitializeMcu ..> Utilities
    ReadyToDrive ..> Utilities
    DriveToStart ..> Utilities
    DriveToFinish ..> Utilities
    DisplayLapTime ..> Utilities
    ErrorHandler ..> Utilities

    class OledDisplay {
        +init(void): UInt8
        +clearScreen(void): void
        +printText(col: UInt8, row: UInt8, text: char*): void
        +setBackLight(value: Bool): void
    }

    class Buttons {
        +init(void): UInt8
        +isPressed(buttonNo: UInt8): Bool
    }

    class LineSensors {
        -threshold: UInt16
        +init(void): UInt8
        +calibrate(void): void
        +isLineDetected(sensorNo: UInt8): Bool
    }

    class DriveMotors {
        +init(void): UInt8
        +setSpeeds(speedLeft: Int16, 
        speedRight: Int16): void
    }
    note bottom of DriveMotors
        The different speeds control the
        two drive motors independently
        which allows to drive in a
        specific direction
    end note

    'Buzzer uses the function playTone because of the dry principle. Is it okay to list it as a private function should we not list it at all?
    class Buzzer {
        -playTone(freq: UInt16, volume: UInt8,
        durationMs: UInt16): void
        +init(void): UInt8
        +shortBeep(void): void
        +alarmSignal(void): void
    }

    class Timer {
        -id: UInt8
        -callback: CallbackFnctn
        -delayMs: UInt32
        -repeat: Bool
        -timeStartMs: UInt32
        +startTimer(id: UInt8, delayMs: UInt32,
         callback: CallbackFnctn, repeat: Bool): Timer
        +stopTimer(id: UInt8): Bool

        +getTimePassed(id: UInt8): UInt32
    }
    note top of Timer
        CallbackFnctn: void(*)(id: UInt8)
    end note
}


Buzzer ..> Timer

StateHandler .[#Red].> Buttons
StateHandler .[#MidnightBlue].> LineSensors
StateHandler .[#DodgerBlue].> Timer








InitializeMcu .[#Fuchsia].> ServiceInit
InitializeMcu .[#Red].> Buttons
InitializeMcu .[#Gold].> OledDisplay

CalibrateLineSensors .[#MidnightBlue].> LineSensors

ReadyToDrive .[#Red].> Buttons
ReadyToDrive .[#Gold].> OledDisplay

DisplayCountdown .[#Gold].> OledDisplay
DisplayCountdown .[#DodgerBlue].> Timer

DriveToStart .[#Orange].> Buzzer
DriveToStart .[#Gold].> OledDisplay
DriveToStart .[#DodgerBlue].> Timer

DriveToFinish .[#Gold].> OledDisplay
DriveToFinish .[#DodgerBlue].> Timer

DriveOverGap .[#DodgerBlue].> Timer

DisplayLapTime .[#Orange].> Buzzer
DisplayLapTime .[#Gold].> OledDisplay
DisplayLapTime .[#DodgerBlue].> Timer

ErrorHandler .[#Orange].> Buzzer
ErrorHandler .[#Gold].> OledDisplay

SetParameters .[#Gold].> OledDisplay
SetParameters .[#DodgerBlue].> Timer




package Hal {
    class HalInit {
        +init(void): UInt8
    }
    note right of HalInit
        This is the init class of the package.
        It calls every init method of all
        the other classes in this package
    end note

    class Gpio {
        +init(void): UInt8
        +setDigital(pinNo: UInt8, state: Bool)
        +getDigital(pinNo: UInt8): Bool
        +getAnalog(pinNo: UInt8): UInt16
    }

    class Pwm {
        +init(void): UInt8
        +enable(pinNo: UInt8): void
        +disable(pinNo: UInt8): void
        +setPwm(pinNo: UInt8, duty: UInt8)
    }
    note right of Pwm::"setPwm"
        duty cycle ranges from 0 (0%) to 255 (100%)
    end note

    class TickTimer {
        +init(void): UInt8
        +getTickCount(void): UInt32
    }

}

/'
used colors
    [#Red]
    [#Orange]
    [#Gold]
    [#Green]
    [#DodgerBlue]
    [#MidnightBlue]
    [#DarkMagenta]
    [#Fuchsia]
'/

ServiceInit .[#Fuchsia].> HalInit

OledDisplay .[#Gold].> Gpio

Buttons .[#Red].> Gpio

Timer .[#DodgerBlue].> TickTimer

LineSensors .[#MidnightBlue].> Gpio

DriveMotors .[#Green].> Pwm

Buzzer .[#Orange].> Pwm



note as N1
    As long as not declared
    otherwise each arrow shows
    a <<uses>> relationship
end note




ServiceInit .[#Fuchsia].> ErrorHandler
HalInit ..> ErrorHandler

@enduml