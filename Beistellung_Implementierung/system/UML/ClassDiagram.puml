@startuml class_diagram

package "Provision" {
package "OS" #DDDDDD {
    class Scheduler {
        + Scheduler_init(void) : SchedulerRet
        + Scheduler_execute(void) : void
        + Scheduler_addTask(Task*) : Scheduler_Ret
        + Scheduler_removeTask(Task*) : Scheduler_Ret
    }

    class Task {
        + Task_init(Task*, TaskWorkCallback, TaskState, void*) : Task_Ret
    }

    class SoftTimer{
        + SoftTimer_init(SoftTimer*) : void
        + SoftTimer_start(SoftTimer*, UInt16) : SoftTimer_Ret
        + SoftTimer_Stop(SoftTImer*) : SoftTimer_Ret
        + SoftTimer_Update(SoftTimer*) : void
        + SoftTimer_restart(SoftTimer*) : SoftTimer_Ret
        + SoftTimer_get(SoftTimer*) : UInt16
        + SoftTimerHandler_init(void) : void
        + SoftTimerHandler_register(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_unRegister(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_update(void) : void
        + SoftTimer_getTimeStampMs(void) : UInt64
    }

    class ErrorHandler {
        + ErrorHandler_show(ErrorHandlerErrorCode) : void
        + ErrorHandler_halt(ErrorHandlerErrorCode) : void
        + ErrorHandler_setErrorCallback(ErrorCallback) : void
        + ErrorHandler_setPrintCallback(PrintCallback) : void
    }


    Scheduler -[hidden]-> ErrorHandler
    ErrorHandler -[hidden]-> SoftTimer

}
package "Service" #DDDDDD {
    class Button {
        + Button_init(void) : void
        + Button_getState(ButtonID) : ButtonState
    }

    class Buzzer {
        + Buzzer_init(void) : void
        + Buzzer_beep(BuzzerID) : void
    }

    class Display {
        + Display_init(void) : void
        + Display_clear(void) : void
        + Display_clearLine(void) : void
        + Display_home(void) : void
        + Display_gotoxy(UInt8, UInt8) : void
        + Display_write(char*, UInt8) : void
        + Display_writeBar(UInt8) : void
    }

    class LED {
        + Led_init(void) : void
        + Led_switchOn(Led_Led) : void
        + Led_switchOff(Led_Led) : void
    }

    class DriveControl {
        + DriveControl_init(void) : void
        + DriveControl_drive(DriveControlMotorID, UInt8, DriveControl_Direction) : void
        + DriveControl_getMileage(void) : Int32
        + DriveControl_resetMileage(void) : void
    }

    class LineSensor {
        + LineSensor_init(void) : void
        + LineSensor_startCalibration(void) : void
        + LineSensor_stopCalibration(void) : void
        + LineSensor_getCalibrationState(void) : bool
        + LineSensor_read(LineSensorValues*) : void
        + LineSensor_enableEmitter(void)
        + LineSensor_disableEmitter(void) : void
    }
}

package "HAL" #DDDDDD {

    class GPIO{
        + Gpio_init(void) : Gpio_Ret
        + Gpio_write(Gpio_ID, Gpio_State) : Gpio_Ret
        + Gpio_read(Gpio_ID, Gpio_State* : Gpio_Ret
        + Gpio_alloc(Gpio_ID, UInt8*) : Gpio_Ret
        + Gpio_free(Gpio_ID, UInt8) : Gpio_Ret
    }
    class PWM{
        + Pwm_init(void) : void
        + Pwm_setDutyCycle(PwmID, UInt8) : void
    }
    class TickTimer{
        + TickTimer_init(void) : void
        + TickTimer_setCallback(TimerTickCallback) : void
        + TickTimer_get(void) : UInt64
        + TickTimer_delay(UInt8) : void
    }
    class IRQ{
        + Irq_init(void) : void
        + Irq_enable(IrqID) : void
        + Irq_disable(IrqID) : void
        + Irq_setCallback(IrqID, IrqCallback) : void
    }
}
    class main {

    }
    main ..> Scheduler

}

package "Application"  {

    class "MainTask" {
        -gMainTask: Task
        -mainTaskWork (void * data): void
        + MainTask_init(void) : MainTask_Ret
    }

    Scheduler <.up.. MainTask : register

    enum EventEnum {
        NO_EVENT_HAS_HAPPEND = 0,
        INIZALIZATION_DONE,
        CALIBRATION_DONE,
        COUNTDOWN_IS_FINISHED,
        POWER_TO_THE_MOTORS_HAS_BEEN_STOPPED,
        START_BUTTON_HAS_BEEN_RELEASED,
        CALIBRATION_BUTTON_HAS_BEEN_RELEASED,
        PARAM_BUTTON_HAS_BEEN_RELEASED,
        START_FINISH_LINE_WAS_RECOGINZED,
        GUIDELINE_WAS_RECOGNIZED,
        CALIBRATION_FAILED,
        INIZALIZATION_FAILED,
        GUIDELINE_WAS_LOST,
        LAPTIME_IS_TOO_LONG,
        DRIVE_OVER_GAP_IS_ACTIVE_FOR_TOO_LONG,
        DRIVE_TO_START_IS_ACTIVE_FOR_TOO_LONG
    }

    class DriveHandler {
        -calculatePosition(const LineSensorValues*): UInt32
        -regulateSpeed(Int32, UInt16*, UInt16*):void
        -gCurrentPos: UInt32
        -gLastPosition: UInt32
        -gLeftSpeed: UInt16
        -gRightSpeed: UInt16
        -gLastError: Int16
        +DriveHandler_stopDriving(void): void
        +DriveHandler_findGuideLine(void):void
        +DriveHandler_followGuideLine(LineSensorValues*): void
    }

    class StateHandler {
        -gCurrentState: EventEnum
        -gCurrentState:StateEnum
        -gLapTimer: SoftTimer*
        -gEntryDone: Bool
        -driveToStartEvent(EventEnum gCurrentEvent): void
        -driveToFinishEvent(EventEnum gCurrentEvent): void
        -driveOverGapEvent(EventEnum gCurrentEvent): void
        -displayCountDownEvent(EventEnum gCurrentEvent): void 
        -readyToDriveEvent(EventEnum gCurrentEvent): void
        -calibrateLineSensorsEvent(EventEnum gCurrentEvent): void
        +StateHandler_process(void): void
    }

    StateHandler ..> EventEnum

    package States {

        StateHandler ..> InitializeMcu
        StateHandler ..> CalibrateLineSensors
        StateHandler ..> ReadyToDrive
        StateHandler ..> DriveToStart
        StateHandler ..> DriveToFinish
        StateHandler ..> DriveOverGap
        StateHandler ..> DisplayCountdown
        StateHandler ..> DisplayLapTime
        StateHandler ..> ErrorHandlerState
        StateHandler ..> SetParameters

        class InitializeMcu {
            +InitializeMcu_initializeAll(void): EventEnum 
            +InitializeMcu_displayTeamName(void): void 
        }

        class CalibrateLineSensors {
            -gState: CalibrationState
            -gResult: EventEnum
            -gTimer: SoftTimer
            +CalibrateLineSensors_initialize(void): void
            +CalibrateLineSensors_calibrateSensors(void): EventEnum
        }

        class ReadyToDrive {
            -wasButtonPressed(ButtonID): Bool
            -lastState: ButtonState
            +ReadyToDrive_checkStateOfButtons(void): EventEnum
        }

        class DriveToStart {
            -gMaxTimeTimer: SoftTimer
            -gLapTimer: SoftTimer
            -sensorValues: LineSensorValues
            +DriveToStart_startMotorsAndTimer(void): void
            +DriveToStart_followGuideLine(void): EventEnum
            +DriveToStart_stopTimer(void): void
            +DriveToStart_startTimerAndBeep(void): SoftTimer*
        }
        DriveToStart .[#Brown].> DriveHandler
        DriveToStart .[#Brown].> LineSensor
        DriveToStart .[#Brown].> SoftTimer

        class DriveToFinish {
            +DriveToFinish_followGuideLine(SoftTimer*): EventEnum
        }
        DriveToFinish .[#Violet].> DriveHandler
        DriveToFinish .[#Violet].> LineSensor

        class DriveOverGap {
            -gEntryTime: UInt16
            + DriveOverGap_saveCurrentLapTime(SoftTimer*): void
            + DriveOverGap_driveOverGap(SoftTimer*): EventEnum
        }
        DriveOverGap .[#gold].> DriveHandler
        DriveOverGap .[#gold].> LineSensor

        class DisplayCountdown {
            -gCountdownTimer: SoftTimer
            -gLastTime: UInt8
            +DisplayCountdown_startCountdown(void): void
            +DisplayCountdown_displayCountdown(void): EventEnum
            +DisplayCountdown_stopCountdown(void): void
        }

        class DisplayLapTime {
            +DisplayLapTime_stopAfterLap(SoftTimer*): EventEnum
            +DisplayLapTime_displayLapTime(SoftTimer*): void
        }

        class SetParameters {
            -gParamSetIdx: UInt8
            -gParamSetArray[]: ParamSet
            +SetParameters_setNextParamSet(void): void
            +SetParameters_displayParamSet(void): void
            +SetParameters_getCurrentParamSet(void): ParamSet
        }

        DriveHandler ..> SetParameters

        class ErrorHandlerState{
            +ErrorHandlerState_callErrorHandler(EventEnum): void
        }
        note bottom of ErrorHandlerState
        The ErrorHandler does not require a return value, 
        as it was defined in the specifications that the 
        robot must always be reset if an error occurs
        end note

        InitializeMcu ..> EventEnum
        CalibrateLineSensors ..> EventEnum
        ReadyToDrive ..> EventEnum
        DriveToStart ..> EventEnum
        DriveToFinish ..> EventEnum
        DriveOverGap ..> EventEnum
        DisplayCountdown ..> EventEnum
        DisplayLapTime ..> EventEnum
        ErrorHandlerState ..> EventEnum
        SetParameters ..> EventEnum

    }

    MainTask .left.> StateHandler

}

ReadyToDrive .[#green].> Display
ReadyToDrive .[#green].> Button

DisplayCountdown .[#FireBrick].> Display
DisplayCountdown .[#FireBrick].> SoftTimer

DisplayLapTime .[#Olive].> SoftTimer
DisplayLapTime .[#Olive].> Buzzer
DisplayLapTime .[#Olive].> Display

SetParameters .[#LimeGreen].> SoftTimer
SetParameters .[#LimeGreen].> Display

DriveOverGap .[#gold].> SoftTimer

DriveToFinish .[#Violet].> SoftTimer

DriveToStart .[#Brown].> SoftTimer
DriveToStart .[#Brown].> Buzzer

ErrorHandlerState .[#Orange].> Buzzer
ErrorHandlerState .[#Orange].> DriveControl
ErrorHandlerState .[#Orange].> ErrorHandler

CalibrateLineSensors .[#red].> DriveControl
CalibrateLineSensors .[#red].> LineSensor

InitializeMcu .[#Blue].> Service
InitializeMcu .[#Blue].> HAL
InitializeMcu .[#Blue].> Display

DriveHandler .[#LightCoral].> DriveControl

' ++++++++++++++++++++++++++++++++
' Service

Button ..> GPIO
Button ..> SoftTimer

Buzzer ..> PWM
Buzzer ..> SoftTimer

Display ..> GPIO
Display ..> TickTimer
Display ..> ErrorHandler

DriveControl ..> GPIO
DriveControl ..> PWM
DriveControl ..> IRQ

LED ..> GPIO

LineSensor ..> SoftTimer
LineSensor ..> GPIO
LineSensor ..> TickTimer
LineSensor .r.> Display

' ++++++++++++++++++++++++++++++++
' OS

' ErrorHandler ..> HAL

SoftTimer ..> TickTimer

Scheduler ..> Task
Scheduler ..> IRQ

@enduml